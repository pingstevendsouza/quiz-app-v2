import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Box,
  Button,
  Container,
  Typography,
  Paper,
  Avatar,
  Chip,
  LinearProgress,
  Divider,
  IconButton,
  Collapse,
  Alert,
  Fade,
  CircularProgress,
  useTheme,
  useMediaQuery
} from '@mui/material';
import {
  ArrowBack,
  ArrowForward,
  CheckCircle,
  RadioButtonUnchecked,
  HelpOutline,
  InfoOutlined,
  AccessTime,
  Lightbulb
} from '@mui/icons-material';

const ModernQuiz = ({ 
  questions = [], 
  timeLimit = 300, // 5 minutes default
  onComplete,
  showResults = false
}) => {
  // State
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [timeRemaining, setTimeRemaining] = useState(timeLimit);
  const [showHint, setShowHint] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [quizStatus, setQuizStatus] = useState('idle'); // 'idle' | 'in-progress' | 'completed'
  
  // Hooks
  const { user } = useAuth();
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  // Derived state
  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const hasAnswered = selectedAnswers[currentQuestionIndex] !== undefined;
  const totalQuestions = questions.length;
  const answeredCount = Object.keys(selectedAnswers).length;

  // Format time as MM:SS
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // Calculate progress percentage
  const getProgressPercentage = useCallback(() => {
    return totalQuestions > 0 ? (answeredCount / totalQuestions) * 100 : 0;
  }, [answeredCount, totalQuestions]);

  // Handle answer selection
  const handleAnswerSelect = (answerIndex) => {
    setSelectedAnswers(prev => ({
      ...prev,
      [currentQuestionIndex]: answerIndex
    }));
    setShowHint(false);
  };

  // Navigate to next question
  const goToNext = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
      setShowHint(false);
    }
  };

  // Navigate to previous question
  const goToPrevious = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1);
      setShowHint(false);
    }
  };

  // Toggle hint visibility
  const toggleHint = () => {
    setShowHint(prev => !prev);
  };

  // Handle quiz submission
  const handleSubmit = () => {
    setIsSubmitting(true);
    setQuizStatus('completed');
    
    // Calculate score
    const score = questions.reduce((acc, question, index) => {
      return acc + (selectedAnswers[index] === question.correctAnswer ? question.points : 0);
    }, 0);

    // Call onComplete with results
    if (onComplete) {
      onComplete({
        score,
        total: questions.reduce((acc, q) => acc + q.points, 0),
        answers: selectedAnswers,
        timeSpent: timeLimit - timeRemaining
      });
    }
  };

  // Timer effect
  useEffect(() => {
    if (quizStatus !== 'in-progress') return;
    
    const timer = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          handleSubmit();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [quizStatus]);

  // Start quiz on mount
  useEffect(() => {
    setQuizStatus('in-progress');
  }, []);

  // Render loading state
  if (quizStatus === 'idle' || !currentQuestion) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
      </Box>
    );
  }

  // Render quiz completed state
  if (quizStatus === 'completed') {
    return (
      <Container maxWidth="md" sx={{ py: 4, textAlign: 'center' }}>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
            <Typography variant="h4" gutterBottom>Quiz Completed!</Typography>
            <Typography variant="h6" color="text.secondary" mb={4}>
              Thank you for taking the quiz
            </Typography>
            <Button 
              variant="contained" 
              color="primary" 
              size="large"
              onClick={() => window.location.reload()}
            >
              Restart Quiz
            </Button>
          </Paper>
        </motion.div>
      </Container>
    );
  }

  // Main quiz UI
  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
        <Box display="flex" alignItems="center" gap={2}>
          <Avatar 
            src={user?.photoURL} 
            alt={user?.displayName?.charAt(0) || 'U'}
            sx={{ width: 48, height: 48 }}
          />
          <Box>
            <Typography variant="subtitle1" fontWeight="bold">
              {user?.displayName || 'User'}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Question {currentQuestionIndex + 1} of {totalQuestions}
            </Typography>
          </Box>
        </Box>
        
        <Chip
          icon={<AccessTime />}
          label={formatTime(timeRemaining)}
          color={timeRemaining < 60 ? 'error' : 'primary'}
          sx={{ 
            fontWeight: 'bold',
            px: 2,
            '& .MuiChip-icon': { color: 'inherit' }
          }}
        />
      </Box>

      {/* Progress Bar */}
      <Box mb={4}>
        <LinearProgress 
          variant="determinate" 
          value={getProgressPercentage()} 
          sx={{ height: 8, borderRadius: 4, mb: 1 }}
        />
        <Box display="flex" justifyContent="space-between">
          <Typography variant="caption" color="text.secondary">
            {Math.round(getProgressPercentage())}% Complete
          </Typography>
          <Typography variant="caption" color="text.secondary">
            {answeredCount} of {totalQuestions} answered
          </Typography>
        </Box>
      </Box>

      {/* Question Card */}
      <motion.div
        key={`question-${currentQuestionIndex}`}
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 20 }}
        transition={{ duration: 0.3 }}
      >
        <Paper elevation={3} sx={{ p: 3, mb: 3, borderRadius: 3 }}>
          <Typography variant="h6" fontWeight="bold" mb={3}>
            {currentQuestion.question}
          </Typography>

          {/* Options */}
          <Box sx={{ mb: 3 }}>
            {currentQuestion.options.map((option, index) => (
              <motion.div
                key={index}
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
              >
                <Button
                  fullWidth
                  variant="outlined"
                  onClick={() => handleAnswerSelect(index)}
                  sx={{
                    justifyContent: 'flex-start',
                    p: 2,
                    mb: 1.5,
                    textTransform: 'none',
                    textAlign: 'left',
                    borderColor: selectedAnswers[currentQuestionIndex] === index ? 'primary.main' : 'divider',
                    backgroundColor: selectedAnswers[currentQuestionIndex] === index ? 'primary.lighter' : 'background.paper',
                    '&:hover': {
                      borderColor: 'primary.main',
                      backgroundColor: 'primary.lighter',
                    },
                  }}
                >
                  <Box mr={2}>
                    {selectedAnswers[currentQuestionIndex] === index ? (
                      <CheckCircle color="primary" />
                    ) : (
                      <RadioButtonUnchecked color="action" />
                    )}
                  </Box>
                  <Typography variant="body1">{option}</Typography>
                </Button>
              </motion.div>
            ))}
          </Box>

          {/* Hint Section */}
          {currentQuestion.hint && (
            <Box mt={3}>
              <Button
                startIcon={<HelpOutline />}
                onClick={toggleHint}
                size="small"
                sx={{ mb: 1 }}
              >
                {showHint ? 'Hide Hint' : 'Need a hint?'}
              </Button>
              <Collapse in={showHint}>
                <Alert 
                  severity="info" 
                  icon={<InfoOutlined />}
                  sx={{ borderRadius: 2 }}
                >
                  {currentQuestion.hint}
                </Alert>
              </Collapse>
            </Box>
          )}
        </Paper>
      </motion.div>

      {/* Navigation Buttons */}
      <Box display="flex" justifyContent="space-between" mt={4}>
        <Button
          variant="outlined"
          onClick={goToPrevious}
          disabled={currentQuestionIndex === 0 || isSubmitting}
          startIcon={<ArrowBack />}
        >
          Previous
        </Button>
        
        {isLastQuestion ? (
          <Button
            variant="contained"
            color="primary"
            onClick={handleSubmit}
            disabled={isSubmitting}
            endIcon={<ArrowForward />}
          >
            {isSubmitting ? 'Submitting...' : 'Submit Quiz'}
          </Button>
        ) : (
          <Button
            variant="contained"
            color="primary"
            onClick={goToNext}
            disabled={!hasAnswered || isSubmitting}
            endIcon={<ArrowForward />}
          >
            Next
          </Button>
        )}
      </Box>
    </Container>
  );
};

export default ModernQuiz;
